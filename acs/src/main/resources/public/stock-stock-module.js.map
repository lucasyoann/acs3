{"version":3,"sources":["webpack:///./app/shared/article/article.entity.ts","webpack:///./app/stock/modal/modal-modif-article.component.ts","webpack:///./app/stock/stock-routing.module.ts","webpack:///./app/stock/stock.component.ts","webpack:///./app/stock/stock.module.ts","webpack:///./app/stock/stock.service.ts"],"names":[],"mappings":"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","file":"stock-stock-module.js","sourcesContent":["export class Article {\r\n    id: number;\r\n    type: string;\r\n    intitule :string\r\n    description: string;\r\n    quantite: number;\r\n    destinataire : string;\r\n}","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MAT_DATE_LOCALE, DateAdapter, MAT_DATE_FORMATS } from '@angular/material';\r\nimport {FormControl} from '@angular/forms';\r\nimport {NgbAlertConfig} from '@ng-bootstrap/ng-bootstrap';\r\nimport {StockService} from '../stock.service';\r\nimport {Article} from '../../shared/article/article.entity';\r\n\r\n\r\nimport { MatDialog } from '@angular/material';\r\nimport { ViewEncapsulation } from \"@angular/core\";\r\n\r\n@Component( {\r\n    encapsulation: ViewEncapsulation.None,\r\n    selector: 'ref-modal-modif-article',\r\n    template: `<div class=\"row\" style=\"justify-content: space-between\">\r\n<h2 mat-dialog-title class=\"color-bleu row\">{{titre}}</h2>\r\n</div>\r\n\r\n<ngb-alert *ngIf=\"saveFailed\">\r\n        {{message}}\r\n  </ngb-alert>\r\n<form (ngSubmit)=\"save()\" ngNativeValidate>\r\n    <mat-dialog-content style=\"width:100%\">\r\n        <div class=\"row\">\r\n            <div class=\"form-group\" style=\"width:100%\"> \r\n                <mat-form-field *ngIf=\"modif\" style=\"width:100%\">\r\n                    <input matInput readonly placeholder=\"Type de mat&eacute;riel\" id=\"type\" name=\"type\" [(ngModel)] = \"article.type\">\r\n                </mat-form-field>\r\n                <mat-form-field *ngIf=\"!modif\" style=\"width:100%\">\r\n                    <input matInput required placeholder=\"Type de mat&eacute;riel\" id=\"type\" name=\"type\" [(ngModel)] = \"article.type\">\r\n                </mat-form-field>\r\n                <mat-form-field *ngIf=\"modif\" style=\"width:100%\">\r\n                    <input matInput readonly placeholder=\"Intitul&eacute;\" id=\"intitule\" name=\"intitule\" [(ngModel)] = \"article.intitule\">\r\n                </mat-form-field>\r\n                <mat-form-field *ngIf=\"!modif\" style=\"width:100%\">\r\n                    <input matInput required placeholder=\"Intitul&eacute;\" id=\"intitule\" name=\"intitule\" [(ngModel)] = \"article.intitule\">\r\n                </mat-form-field>\r\n                <mat-form-field style=\"width:100%\">\r\n                    <input matInput required placeholder=\"Quantit&eacute;\" id=\"quantite\" name=\"quantite\" [(ngModel)] = \"article.quantite\">\r\n                </mat-form-field>\r\n                <hr/>\r\n                <div style=\"width:100%\">\r\n                    <h5>Description</h5>\r\n                    <mat-form-field style=\"width:100%\">\r\n                        <textarea matInput style=\"min-width: 100%\" [(ngModel)] = \"article.description\" [ngModelOptions]=\"{standalone: true}\"></textarea>\r\n                    </mat-form-field>\r\n                </div>\r\n            </div>\r\n        </div>  \r\n    </mat-dialog-content>\r\n    <mat-dialog-actions>\r\n        <button type=\"button\" class=\"btn btn-link\" (click)=\"dialogRef.close()\">Annuler</button>\r\n        <button type=\"submit\" class=\"btn btn-success\">{{labelBouton}}</button>\r\n    </mat-dialog-actions>\r\n</form>`,\r\n    providers: [\r\n                {provide: MAT_DATE_LOCALE, useValue: 'fr-FR'},\r\n                NgbAlertConfig\r\n              ],\r\n} )\r\n\r\nexport class ModalModifArticleComponent implements OnInit {\r\n    \r\n    message : string;\r\n    saveFailed : boolean=false;\r\n    article: Article=new Article();\r\n    titre : string;\r\n    modif: boolean =false;\r\n    labelBouton : string;\r\n    \r\n    constructor(public dialogRef: MatDialogRef<StockService>,\r\n            @Inject(MAT_DIALOG_DATA) public data, private stockService:StockService,\r\n            public alertConfig: NgbAlertConfig ) {\r\n        alertConfig.type = 'danger';\r\n        alertConfig.dismissible = false;\r\n    }\r\n    \r\n    ngOnInit() {\r\n        if(this.data.article){\r\n            this.article = this.data.article;\r\n            this.titre=\"Modification d'un article\";\r\n            this.labelBouton=\"Modifier\";\r\n            this.modif=true;\r\n        }else{\r\n            this.titre=\"Ajout d'un article\";\r\n            this.labelBouton=\"Ajouter\";\r\n            this.modif=false;\r\n        }   \r\n    }\r\n    \r\n    save(){\r\n        this.stockService.modifUser(this.article).subscribe(\r\n                data=>{\r\n                    this.dialogRef.close();\r\n                    window.location.reload();\r\n                },\r\n                error=>{\r\n                    this.message=\"Erreur d'enregistrement de l'article\";\r\n                    this.saveFailed=true;\r\n                }\r\n        );\r\n    }\r\n   \r\n    \r\n}","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { StockComponent } from './stock.component';\r\nimport { RouteGuard } from '../auth/route.guard';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: StockComponent,\r\n        canActivate: [RouteGuard],\r\n        data: {\r\n            title: 'Module stock'\r\n        }\r\n    }];\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [RouterModule]\r\n})\r\nexport class StockRoutingModule { }","import {Component, ElementRef, OnInit, ViewChild, ViewEncapsulation, SimpleChanges } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MAT_DATE_LOCALE, DateAdapter, MAT_DATE_FORMATS } from '@angular/material';\r\nimport { ReservationService } from '../reservation/reservation.service';\r\nimport { MatDialog } from '@angular/material';\r\nimport { TokenStorageService } from '../auth/token-storage.service';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport {StockService} from './stock.service';\r\nimport {Article} from '../shared/article/article.entity';\r\nimport {MatSort, MatTableDataSource} from '@angular/material';\r\nimport {Sort} from '@angular/material';\r\nimport {ModalModifArticleComponent} from './modal/modal-modif-article.component';\r\n\r\n\r\n@Component( {\r\n    encapsulation: ViewEncapsulation.None,\r\n    selector: 'app-stock',\r\n    template: `<ngb-alert *ngIf=\"saveFailed\">\r\n        {{message}}\r\n  </ngb-alert>\r\n<div style=\"background-color:white;border-radius:5px;margin:15px 0;\">\r\n    <div style=\"display:flex; flex-direction:row; justify-content:space-between; align-items:center;\">\r\n        <h2 mat-dialog-title class=\"color-bleu\" style=\"margin:10px 20px;padding-top:10px\">Gestion des stocks</h2>\r\n        <button type=\"button\" style=\"margin-right:10px\" class=\"btn btn-success\" (click)=\"modifierArticle(element)\">Cr&eacute;er un Article</button>\r\n    </div>\r\n    \r\n    <table mat-table *ngIf=\"listArticle && listArticle.length>0\" [dataSource]=\"listArticle\" matSort (matSortChange)=\"sortData($event)\" style=\"width:100%; border-top:1px solid rgba(0, 0, 0, 0.1)\">\r\n\r\n    <!--- Note that these columns can be defined in any order.\r\n        The actual rendered columns are set as a property on the row definition\" -->\r\n    <ng-container matColumnDef=\"type\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header=\"type\"> Type </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.type}} </td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"intitule\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header=\"intitule\"> Initul&eacute; </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.intitule}} </td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"description\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header=\"description\"> Description </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"quantite\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header=\"quantite\"> Quantit&eacute; </th>\r\n        <td mat-cell *matCellDef=\"let element\"> {{element.quantite}} </td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"modifier\">\r\n        <th mat-header-cell *matHeaderCellDef> Modifier </th>\r\n        <td mat-cell *matCellDef=\"let element\"> <button type=\"button\" class=\"btn btn-success\" (click)=\"modifierArticle(element)\">Modifier</button> </td>\r\n    </ng-container>\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n    </table>\r\n</div>`\r\n} )\r\nexport class StockComponent implements OnInit {\r\n    \r\n    saveFailed : boolean =false;\r\n    superAdministrateur : boolean = false;\r\n    message:string;\r\n    listArticle : Article[];\r\n    displayedColumns: string[] = ['type','intitule','description', 'quantite', 'modifier'];\r\n    \r\n    constructor(public dialog: MatDialog, private reservationService:ReservationService,\r\n             private token : TokenStorageService,private stockService: StockService, private router: Router){}\r\n    \r\n    \r\n    \r\n    ngOnInit() { \r\n        this.token.getAuthorities().forEach(function(role : string){\r\n            if(role===\"ROLE_SUPER_ADMIN\"){\r\n                this.superAdministrateur=true;\r\n            }\r\n        }.bind(this));\r\n        if(this.superAdministrateur){\r\n            this.stockService.getUsers().subscribe(\r\n                    data=>{\r\n                        this.listArticle=data;\r\n                    },\r\n                    error=>{\r\n                        this.saveFailed=true;\r\n                        this.message=\"Erreur de récupération du stock\";\r\n                    }\r\n            )\r\n        }else{\r\n            this.router.navigate( ['/dashboard']);\r\n        }\r\n    }\r\n    \r\n    sortData(sort: Sort) {\r\n        const data = this.listArticle.slice();\r\n        if (!sort.active || sort.direction === '') {\r\n          this.listArticle = data;\r\n          return;\r\n        }\r\n\r\n        this.listArticle= data.sort((a, b) => {\r\n          const isAsc = sort.direction === 'asc';\r\n          switch (sort.active) {\r\n            case 'type': return compare(a.type, b.type, isAsc);\r\n            case 'intitule': return compare(a.intitule, b.intitule, isAsc);\r\n            case 'description': return compare(a.description, b.description, isAsc);\r\n            case 'quantite': return compare(a.quantite, b.quantite, isAsc);\r\n            default: return 0;\r\n          }\r\n        });\r\n      }\r\n    \r\n    modifierArticle(element : Article){\r\n        const dialogRef = this.dialog.open(ModalModifArticleComponent, {\r\n            data: {article: element}\r\n        });\r\n    }\r\n    \r\n}\r\n\r\nfunction compare(a: number | string, b: number | string, isAsc: boolean) {\r\n    return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\r\n  }","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Component } from '@angular/core';\r\n\r\n\r\nimport {StockComponent} from './stock.component';\r\nimport { StockRoutingModule } from './stock-routing.module';\r\nimport { MatDialogModule, MatFormFieldModule, MatNativeDateModule, MatInputModule,MatCheckboxModule, MatSelectModule } from '@angular/material';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { StockService } from './stock.service';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatSortModule} from '@angular/material/sort';\r\n\r\nimport {ModalModifArticleComponent} from './modal/modal-modif-article.component';\r\n\r\nimport { Http } from '@angular/http';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { httpInterceptorProviders } from 'src/main/webapp/app/auth/auth-interceptor';\r\n@NgModule({\r\n    imports: [\r\n      CommonModule,\r\n      FormsModule,\r\n      HttpClientModule,\r\n      StockRoutingModule,\r\n      MatCardModule,\r\n      MatDialogModule,\r\n      MatFormFieldModule,\r\n      MatNativeDateModule,\r\n      MatInputModule, \r\n      MatCheckboxModule,\r\n      MatSelectModule,\r\n      NgbModule,\r\n      MatDatepickerModule,\r\n      MatTableModule,\r\n      MatSortModule\r\n    ],\r\n    declarations:[StockComponent,ModalModifArticleComponent],\r\n    entryComponents:[ModalModifArticleComponent],\r\n    providers: [Http, httpInterceptorProviders, StockService]\r\n})\r\n\r\nexport class StockModule{}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\r\n\r\nimport {Article} from '../shared/article/article.entity';\r\n\r\nconst httpOptions = {\r\n        headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n      };\r\n\r\n@Injectable()\r\nexport class StockService {\r\n    \r\n    private listArticles = 'articles/';\r\n    \r\n    constructor(private http: HttpClient) { }\r\n    \r\n    getUsers(): Observable<Article[]> {\r\n        return this.http.get(this.listArticles) as Observable<Article[]>;\r\n    }\r\n    \r\n    modifUser(article:Article) :  Observable<string> {\r\n        return this.http.post<string>(this.listArticles, article, httpOptions);\r\n    }\r\n    \r\n}"],"sourceRoot":""}